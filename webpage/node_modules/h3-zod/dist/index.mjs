// src/parsers.ts
import { createError, getQuery, getRouterParams, readBody } from "h3";
import { z } from "zod";
var DEFAULT_ERROR_MESSAGE = "Bad Request";
var DEFAULT_ERROR_STATUS = 400;
function createBadRequest(error) {
  return createError({
    statusCode: DEFAULT_ERROR_STATUS,
    statusText: DEFAULT_ERROR_MESSAGE,
    data: error
  });
}
async function useValidatedQuery(event, schema, parseOptions) {
  try {
    const query = getQuery(event);
    const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
    const parsed = await finalSchema.parseAsync(query, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
function useSafeValidatedQuery(event, schema, parseOptions) {
  const query = getQuery(event);
  const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
  return finalSchema.safeParseAsync(query, parseOptions);
}
async function useValidatedBody(event, schema, parseOptions) {
  try {
    const body = await readBody(event);
    const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
    const parsed = await finalSchema.parseAsync(body, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
async function useSafeValidatedBody(event, schema, parseOptions) {
  const body = await readBody(event);
  const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
  return finalSchema.safeParseAsync(body, parseOptions);
}
async function useValidatedParams(event, schema, parseOptions) {
  try {
    const params = getRouterParams(event);
    const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
    const parsed = await finalSchema.parseAsync(params, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
function useSafeValidatedParams(event, schema, parseOptions) {
  const params = getRouterParams(event);
  const finalSchema = schema instanceof z.ZodType ? schema : z.object(schema);
  return finalSchema.safeParseAsync(params, parseOptions);
}

// src/schemas.ts
import { z as z2 } from "zod";
var boolAsString = z2.string().regex(/^(true|false)$/, 'Must be a boolean string ("true" or "false")').transform((value) => value === "true");
var checkboxAsString = z2.literal("on").optional().transform((value) => value === "on");
var intAsString = z2.string().regex(/^-?\d+$/, "Must be an integer string").transform((val) => parseInt(val, 10));
var numAsString = z2.string().regex(/^-?\d*\.?\d+$/, "Must be a number string").transform(Number);

// src/index.ts
import {
  z as z3
} from "zod";
var zh = {
  useSafeValidatedBody,
  useSafeValidatedParams,
  useSafeValidatedQuery,
  useValidatedBody,
  useValidatedParams,
  useValidatedQuery,
  boolAsString,
  checkboxAsString,
  intAsString,
  numAsString
};
export {
  useSafeValidatedBody,
  useSafeValidatedParams,
  useSafeValidatedQuery,
  useValidatedBody,
  useValidatedParams,
  useValidatedQuery,
  z3 as z,
  zh
};
