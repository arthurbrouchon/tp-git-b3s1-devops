"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useSafeValidatedBody: () => useSafeValidatedBody,
  useSafeValidatedParams: () => useSafeValidatedParams,
  useSafeValidatedQuery: () => useSafeValidatedQuery,
  useValidatedBody: () => useValidatedBody,
  useValidatedParams: () => useValidatedParams,
  useValidatedQuery: () => useValidatedQuery,
  z: () => import_zod3.z,
  zh: () => zh
});
module.exports = __toCommonJS(src_exports);

// src/parsers.ts
var import_h3 = require("h3");
var import_zod = require("zod");
var DEFAULT_ERROR_MESSAGE = "Bad Request";
var DEFAULT_ERROR_STATUS = 400;
function createBadRequest(error) {
  return (0, import_h3.createError)({
    statusCode: DEFAULT_ERROR_STATUS,
    statusText: DEFAULT_ERROR_MESSAGE,
    data: error
  });
}
async function useValidatedQuery(event, schema, parseOptions) {
  try {
    const query = (0, import_h3.getQuery)(event);
    const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
    const parsed = await finalSchema.parseAsync(query, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
function useSafeValidatedQuery(event, schema, parseOptions) {
  const query = (0, import_h3.getQuery)(event);
  const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
  return finalSchema.safeParseAsync(query, parseOptions);
}
async function useValidatedBody(event, schema, parseOptions) {
  try {
    const body = await (0, import_h3.readBody)(event);
    const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
    const parsed = await finalSchema.parseAsync(body, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
async function useSafeValidatedBody(event, schema, parseOptions) {
  const body = await (0, import_h3.readBody)(event);
  const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
  return finalSchema.safeParseAsync(body, parseOptions);
}
async function useValidatedParams(event, schema, parseOptions) {
  try {
    const params = (0, import_h3.getRouterParams)(event);
    const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
    const parsed = await finalSchema.parseAsync(params, parseOptions);
    return parsed;
  } catch (error) {
    throw createBadRequest(error);
  }
}
function useSafeValidatedParams(event, schema, parseOptions) {
  const params = (0, import_h3.getRouterParams)(event);
  const finalSchema = schema instanceof import_zod.z.ZodType ? schema : import_zod.z.object(schema);
  return finalSchema.safeParseAsync(params, parseOptions);
}

// src/schemas.ts
var import_zod2 = require("zod");
var boolAsString = import_zod2.z.string().regex(/^(true|false)$/, 'Must be a boolean string ("true" or "false")').transform((value) => value === "true");
var checkboxAsString = import_zod2.z.literal("on").optional().transform((value) => value === "on");
var intAsString = import_zod2.z.string().regex(/^-?\d+$/, "Must be an integer string").transform((val) => parseInt(val, 10));
var numAsString = import_zod2.z.string().regex(/^-?\d*\.?\d+$/, "Must be a number string").transform(Number);

// src/index.ts
var import_zod3 = require("zod");
var zh = {
  useSafeValidatedBody,
  useSafeValidatedParams,
  useSafeValidatedQuery,
  useValidatedBody,
  useValidatedParams,
  useValidatedQuery,
  boolAsString,
  checkboxAsString,
  intAsString,
  numAsString
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useSafeValidatedBody,
  useSafeValidatedParams,
  useSafeValidatedQuery,
  useValidatedBody,
  useValidatedParams,
  useValidatedQuery,
  z,
  zh
});
