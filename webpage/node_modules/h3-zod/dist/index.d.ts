import * as zod from 'zod';
import { z } from 'zod';
export { z } from 'zod';
import { H3Event } from 'h3';

type UnknownKeysParam = 'passthrough' | 'strict' | 'strip';
type Schema<U extends UnknownKeysParam = any> = z.ZodObject<any, U> | z.ZodUnion<[Schema<U>, ...Schema<U>[]]> | z.ZodIntersection<Schema<U>, Schema<U>> | z.ZodDiscriminatedUnion<string, z.ZodObject<any, U>[]> | z.ZodEffects<z.ZodTypeAny>;
type ParsedData<T extends Schema | z.ZodRawShape> = T extends Schema ? z.output<T> : T extends z.ZodRawShape ? z.output<z.ZodObject<T>> : never;
type ParseOptions = Partial<z.ParseParams>;
/**
 * Parse and validate request query from event handler. Throws an error if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useValidatedQuery<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<ParsedData<T>>;
type SafeParsedData<T extends Schema | z.ZodRawShape> = T extends Schema ? z.SafeParseReturnType<T, ParsedData<T>> : T extends z.ZodRawShape ? z.SafeParseReturnType<z.ZodObject<T>, ParsedData<T>> : never;
/**
 * Parse and validate query from event handler. Doesn't throw if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useSafeValidatedQuery<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<SafeParsedData<T>>;
/**
 * Parse and validate request body from event handler. Throws an error if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useValidatedBody<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<ParsedData<T>>;
/**
 * Parse and validate request body from event handler. Doesn't throw if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useSafeValidatedBody<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<SafeParsedData<T>>;
/**
 * Parse and validate params from event handler. Throws an error if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useValidatedParams<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<ParsedData<T>>;
/**
 * Parse and validate params from event handler. Doesn't throw if validation fails.
 * @param event - A H3 event object.
 * @param schema - A Zod object shape or object schema to validate.
 */
declare function useSafeValidatedParams<T extends Schema | z.ZodRawShape>(event: H3Event, schema: T, parseOptions?: ParseOptions): Promise<SafeParsedData<T>>;

declare const zh: {
    useSafeValidatedBody: typeof useSafeValidatedBody;
    useSafeValidatedParams: typeof useSafeValidatedParams;
    useSafeValidatedQuery: typeof useSafeValidatedQuery;
    useValidatedBody: typeof useValidatedBody;
    useValidatedParams: typeof useValidatedParams;
    useValidatedQuery: typeof useValidatedQuery;
    boolAsString: zod.ZodEffects<zod.ZodString, boolean, string>;
    checkboxAsString: zod.ZodEffects<zod.ZodOptional<zod.ZodLiteral<"on">>, boolean, "on" | undefined>;
    intAsString: zod.ZodEffects<zod.ZodString, number, string>;
    numAsString: zod.ZodEffects<zod.ZodString, number, string>;
};

export { useSafeValidatedBody, useSafeValidatedParams, useSafeValidatedQuery, useValidatedBody, useValidatedParams, useValidatedQuery, zh };
